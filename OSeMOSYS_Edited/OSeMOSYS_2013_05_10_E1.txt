# OSeMOSYS_2013_05_10_E1
# 
# Open Source energy MOdeling SYStem
#
#	Changes:
#		- Added storage output to SelectedOutput.csv
#
#
#
# ============================================================================
#
#    Copyright [2010-2013] [OSeMOSYS Forum steering committee see: www.osemosys.org]
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# ============================================================================
#
#  To run OSeMOSYS, enter the following line into your command prompt after replacing FILEPATH & YOURDATAFILE with your folder structure and data file name: 
#
#  C:\...FILEPATH...\glpsol -m C:\...FILEPATH...\OSeMOSYS_2013_05_10.mod -d C:\...FILEPATH...\YOURDATAFILE.dat -o C:\...FILEPATH...\Results.txt
#
#  Alternatively, install GUSEK (http://gusek.sourceforge.net/gusek.html) and run the model within this integrated development environment (IDE). 
#  To do so, open the .dat file and select "Use External .dat file" from the Options menu. Then change to the model file and select the "Go" icon or press F5.
#
#              			#########################################
######################			Model Definition				#############
#              			#########################################
#
###############
#    Sets     #
############### 
# 
set YEAR;
set TECHNOLOGY;
set TIMESLICE;
set FUEL;
set EMISSION;
set MODE_OF_OPERATION;
set REGION;
set SEASON;
set DAYTYPE;
set DAILYTIMEBRACKET;
set FLEXIBLEDEMANDTYPE; 
set STORAGE;
#
#####################
#    Parameters     #
#####################
#	
########			Global 						#############
#
param YearSplit{l in TIMESLICE, y in YEAR};
param DiscountRate{r in REGION, t in TECHNOLOGY};
param DaySplit{lh in DAILYTIMEBRACKET, y in YEAR};
param Conversionls{l in TIMESLICE, ls in SEASON};
param Conversionld{l in TIMESLICE, ld in DAYTYPE};
param Conversionlh{l in TIMESLICE, lh in DAILYTIMEBRACKET};
param DaysInDayType{ls in SEASON, ld in DAYTYPE, y in YEAR};
param TradeRoute{r in REGION, rr in REGION, f in FUEL, y in YEAR};
param DepreciationMethod{r in REGION};
#
########			Demands 					#############
#
param SpecifiedAnnualDemand{r in REGION, f in FUEL, y in YEAR}; 
param SpecifiedDemandProfile{r in REGION, f in FUEL, l in TIMESLICE, y in YEAR};
param AccumulatedAnnualDemand{r in REGION, f in FUEL, y in YEAR};
#
#########			Performance					#############
#
param CapacityToActivityUnit{r in REGION, t in TECHNOLOGY};
param TechWithCapacityNeededToMeetPeakTS{r in REGION, t in TECHNOLOGY};
param CapacityFactor{r in REGION, t in TECHNOLOGY, l in TIMESLICE, y in YEAR};
param AvailabilityFactor{r in REGION, t in TECHNOLOGY, y in YEAR};
param OperationalLife{r in REGION, t in TECHNOLOGY};
param ResidualCapacity{r in REGION, t in TECHNOLOGY, y in YEAR};
param InputActivityRatio{r in REGION, t in TECHNOLOGY, f in FUEL, m in MODE_OF_OPERATION, y in YEAR};
param OutputActivityRatio{r in REGION, t in TECHNOLOGY, f in FUEL, m in MODE_OF_OPERATION, y in YEAR};
#
#########			Technology Costs			#############
#
param CapitalCost{r in REGION, t in TECHNOLOGY, y in YEAR};
param VariableCost{r in REGION, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR};
param FixedCost{r in REGION, t in TECHNOLOGY, y in YEAR};
#
#########           		Storage                 		#############
#
param TechnologyToStorage{r in REGION, t in TECHNOLOGY, s in STORAGE, m in MODE_OF_OPERATION};
param TechnologyFromStorage{r in REGION, t in TECHNOLOGY, s in STORAGE, m in MODE_OF_OPERATION};
param StorageLevelStart{r in REGION, s in STORAGE};
param StorageMaxChargeRate{r in REGION, s in STORAGE};
param StorageMaxDischargeRate{r in REGION, s in STORAGE};
param MinStorageCharge{r in REGION, s in STORAGE, y in YEAR};
param OperationalLifeStorage{r in REGION, s in STORAGE};
param CapitalCostStorage{r in REGION, s in STORAGE, y in YEAR};
param DiscountRateStorage{r in REGION, s in STORAGE};
param ResidualStorageCapacity{r in REGION, s in STORAGE, y in YEAR};
#
#########			Capacity Constraints		#############
#
param CapacityOfOneTechnologyUnit{r in REGION, t in TECHNOLOGY, y in YEAR};
param TotalAnnualMaxCapacity{r in REGION, t in TECHNOLOGY, y in YEAR};
param TotalAnnualMinCapacity{r in REGION, t in TECHNOLOGY, y in YEAR};
#
#########			Investment Constraints		#############
#
param TotalAnnualMaxCapacityInvestment{r in REGION, t in TECHNOLOGY, y in YEAR};
param TotalAnnualMinCapacityInvestment{r in REGION, t in TECHNOLOGY, y in YEAR};
#
#########			Activity Constraints		#############
#
param TotalTechnologyAnnualActivityUpperLimit{r in REGION, t in TECHNOLOGY, y in YEAR};
param TotalTechnologyAnnualActivityLowerLimit{r in REGION, t in TECHNOLOGY, y in YEAR};
param TotalTechnologyModelPeriodActivityUpperLimit{r in REGION, t in TECHNOLOGY};
param TotalTechnologyModelPeriodActivityLowerLimit{r in REGION, t in TECHNOLOGY};
#
#########			Reserve Margin				############# 
#
param ReserveMarginTagTechnology{r in REGION, t in TECHNOLOGY, y in YEAR}; 
param ReserveMarginTagFuel{r in REGION, f in FUEL, y in YEAR};
param ReserveMargin{r in REGION, y in YEAR};
#
#########			RE Generation Target		############# 
#
param RETagTechnology{r in REGION, t in TECHNOLOGY, y in YEAR};
param RETagFuel{r in REGION, f in FUEL, y in YEAR}; 
param REMinProductionTarget{r in REGION, y in YEAR};
#
#########			Emissions & Penalties		#############
#
param EmissionActivityRatio{r in REGION, t in TECHNOLOGY, e in EMISSION, m in MODE_OF_OPERATION, y in YEAR};
param EmissionsPenalty{r in REGION, e in EMISSION, y in YEAR};
param AnnualExogenousEmission{r in REGION, e in EMISSION, y in YEAR};
param AnnualEmissionLimit{r in REGION, e in EMISSION, y in YEAR};
param ModelPeriodExogenousEmission{r in REGION, e in EMISSION};
param ModelPeriodEmissionLimit{r in REGION, e in EMISSION};
#
######################
#   Model Variables  #
######################
#
########			Demands 					#############
#
var RateOfDemand{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}>= 0;
var Demand{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}>= 0;
#
########     		Storage                 		#############
#
var RateOfStorageCharge{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR};
var RateOfStorageDischarge{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR};
var NetChargeWithinYear{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR};
var NetChargeWithinDay{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR};
var StorageLevelYearStart{r in REGION, s in STORAGE, y in YEAR} >=0;
var StorageLevelYearFinish{r in REGION, s in STORAGE, y in YEAR} >=0;
var StorageLevelSeasonStart{r in REGION, s in STORAGE, ls in SEASON, y in YEAR} >=0;
var StorageLevelDayTypeStart{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, y in YEAR} >=0;
var StorageLevelDayTypeFinish{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, y in YEAR} >=0;
var StorageLowerLimit{r in REGION, s in STORAGE, y in YEAR}>=0;
var StorageUpperLimit{r in REGION, s in STORAGE, y in YEAR} >=0;
var AccumulatedNewStorageCapacity{r in REGION, s in STORAGE, y in YEAR} >=0;
var NewStorageCapacity{r in REGION, s in STORAGE, y in YEAR} >=0;
var CapitalInvestmentStorage{r in REGION, s in STORAGE, y in YEAR} >=0;
var DiscountedCapitalInvestmentStorage{r in REGION, s in STORAGE, y in YEAR} >=0;
var SalvageValueStorage{r in REGION, s in STORAGE, y in YEAR} >=0;
var DiscountedSalvageValueStorage{r in REGION, s in STORAGE, y in YEAR} >=0;
var TotalDiscountedStorageCost{r in REGION, s in STORAGE, y in YEAR} >=0;
#
#########		    Capacity Variables 			############# 
#
var NumberOfNewTechnologyUnits{r in REGION, t in TECHNOLOGY, y in YEAR} >= 0,integer;
var NewCapacity{r in REGION, t in TECHNOLOGY, y in YEAR} >= 0;
var AccumulatedNewCapacity{r in REGION, t in TECHNOLOGY, y in YEAR} >= 0;
var TotalCapacityAnnual{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
#
#########		    Activity Variables 			#############
#
var RateOfActivity{r in REGION, l in TIMESLICE, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR} >= 0; 
var RateOfTotalActivity{r in REGION, t in TECHNOLOGY, l in TIMESLICE, y in YEAR} >= 0;
var TotalTechnologyAnnualActivity{r in REGION, t in TECHNOLOGY, y in YEAR} >= 0;
var TotalAnnualTechnologyActivityByMode{r in REGION, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR}>=0;
var RateOfProductionByTechnologyByMode{r in REGION, l in TIMESLICE, t in TECHNOLOGY, m in MODE_OF_OPERATION, f in FUEL, y in YEAR}>= 0;
var RateOfProductionByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR}>= 0;
var ProductionByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR}>= 0;
var ProductionByTechnologyAnnual{r in REGION, t in TECHNOLOGY, f in FUEL, y in YEAR}>= 0;
var RateOfProduction{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR} >= 0;
var Production{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR} >= 0;
var RateOfUseByTechnologyByMode{r in REGION, l in TIMESLICE, t in TECHNOLOGY, m in MODE_OF_OPERATION, f in FUEL, y in YEAR}>= 0;
var RateOfUseByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR} >= 0;
var UseByTechnologyAnnual{r in REGION, t in TECHNOLOGY, f in FUEL, y in YEAR}>= 0;
var RateOfUse{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}>= 0;
var UseByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR}>= 0;
var Use{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}>= 0;
var Trade{r in REGION, rr in REGION, l in TIMESLICE, f in FUEL, y in YEAR};
var TradeAnnual{r in REGION, rr in REGION, f in FUEL, y in YEAR};
#
var ProductionAnnual{r in REGION, f in FUEL, y in YEAR}>= 0;
var UseAnnual{r in REGION, f in FUEL, y in YEAR}>= 0;
#
#########		    Costing Variables 			#############
#
var CapitalInvestment{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var DiscountedCapitalInvestment{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
#
var SalvageValue{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var DiscountedSalvageValue{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var OperatingCost{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var DiscountedOperatingCost{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
#
var AnnualVariableOperatingCost{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var AnnualFixedOperatingCost{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var VariableOperatingCost{r in REGION, t in TECHNOLOGY, l in TIMESLICE, y in YEAR}>= 0;
#
var TotalDiscountedCostByTechnology{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var TotalDiscountedCost{r in REGION, y in YEAR}>= 0;
#
var ModelPeriodCostByRegion{r in REGION} >= 0;
#
#########			Reserve Margin				#############
#
var TotalCapacityInReserveMargin{r in REGION, y in YEAR}>= 0;
var DemandNeedingReserveMargin{r in REGION,l in TIMESLICE, y in YEAR}>= 0;
#
#########			RE Gen Target				#############
#
var TotalREProductionAnnual{r in REGION, y in YEAR};
var RETotalDemandOfTargetFuelAnnual{r in REGION, y in YEAR};
#
var TotalTechnologyModelPeriodActivity{r in REGION, t in TECHNOLOGY};
#
#########			Emissions					#############
#
var AnnualTechnologyEmissionByMode{r in REGION, t in TECHNOLOGY, e in EMISSION, m in MODE_OF_OPERATION, y in YEAR}>= 0;
var AnnualTechnologyEmission{r in REGION, t in TECHNOLOGY, e in EMISSION, y in YEAR}>= 0;
var AnnualTechnologyEmissionPenaltyByEmission{r in REGION, t in TECHNOLOGY, e in EMISSION, y in YEAR}>= 0;
var AnnualTechnologyEmissionsPenalty{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var DiscountedTechnologyEmissionsPenalty{r in REGION, t in TECHNOLOGY, y in YEAR}>= 0;
var AnnualEmissions{r in REGION, e in EMISSION, y in YEAR}>= 0;
var ModelPeriodEmissions{r in REGION, e in EMISSION}>= 0;
#
#	table data IN "CSV" "data.csv": s <- [FROM,TO], d~DISTANCE, c~COST;
#	table capacity IN "CSV" "SpecifiedAnnualDemand.csv": [YEAR, FUEL, REGION], SpecifiedAnnualDemand~ColumnNameInCSVSheet;
#
######################
# Objective Function #
######################
#
minimize cost: sum{r in REGION, y in YEAR} TotalDiscountedCost[r,y];
#
#####################
# Constraints       #
#####################
#
s.t. EQ_SpecifiedDemand{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: SpecifiedAnnualDemand[r,f,y]*SpecifiedDemandProfile[r,f,l,y] / YearSplit[l,y]=RateOfDemand[r,l,f,y];
#
#########       	Capacity Adequacy A	     	#############
#
s.t. CAa1_TotalNewCapacity{r in REGION, t in TECHNOLOGY, y in YEAR}:AccumulatedNewCapacity[r,t,y] = sum{yy in YEAR: y-yy < OperationalLife[r,t] && y-yy>=0} 
								if CapacityOfOneTechnologyUnit[r,t,y]=0 then NewCapacity[r,t,yy]
								else CapacityOfOneTechnologyUnit[r,t,yy]*NumberOfNewTechnologyUnits[r,t,yy];
s.t. CAa2_TotalAnnualCapacity{r in REGION, t in TECHNOLOGY, y in YEAR}: AccumulatedNewCapacity[r,t,y]+ ResidualCapacity[r,t,y] = TotalCapacityAnnual[r,t,y];
s.t. CAa3_TotalActivityOfEachTechnology{r in REGION, t in TECHNOLOGY, l in TIMESLICE, y in YEAR}: sum{m in MODE_OF_OPERATION} RateOfActivity[r,l,t,m,y] = RateOfTotalActivity[r,t,l,y];
s.t. CAa4_Constraint_Capacity{r in REGION, l in TIMESLICE, t in TECHNOLOGY, y in YEAR: TechWithCapacityNeededToMeetPeakTS[r,t]<>0}: RateOfTotalActivity[r,t,l,y] <= TotalCapacityAnnual[r,t,y] * CapacityFactor[r,t,l,y]*CapacityToActivityUnit[r,t];
#
# Note that the PlannedMaintenance equation below ensures that all other technologies have a capacity great enough to at least meet the annual average.
#
#########       	Capacity Adequacy B		 	#############
#
s.t. CAb1_PlannedMaintenance{r in REGION, t in TECHNOLOGY, y in YEAR}: sum{l in TIMESLICE} RateOfTotalActivity[r,t,l,y]*YearSplit[l,y] <= sum{l in TIMESLICE} (TotalCapacityAnnual[r,t,y]*CapacityFactor[r,t,l,y]*YearSplit[l,y])* AvailabilityFactor[r,t,y]*CapacityToActivityUnit[r,t];
#
#########	        Energy Balance A    	 	#############
#
s.t. EBa1_RateOfFuelProduction1{r in REGION, l in TIMESLICE, f in FUEL, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR: OutputActivityRatio[r,t,f,m,y] <>0}:  RateOfActivity[r,l,t,m,y]*OutputActivityRatio[r,t,f,m,y]  = RateOfProductionByTechnologyByMode[r,l,t,m,f,y];
s.t. EBa2_RateOfFuelProduction2{r in REGION, l in TIMESLICE, f in FUEL, t in TECHNOLOGY, y in YEAR}: sum{m in MODE_OF_OPERATION: OutputActivityRatio[r,t,f,m,y] <>0} RateOfProductionByTechnologyByMode[r,l,t,m,f,y] = RateOfProductionByTechnology[r,l,t,f,y] ;
s.t. EBa3_RateOfFuelProduction3{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: sum{t in TECHNOLOGY} RateOfProductionByTechnology[r,l,t,f,y]  =  RateOfProduction[r,l,f,y];
s.t. EBa4_RateOfFuelUse1{r in REGION, l in TIMESLICE, f in FUEL, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR: InputActivityRatio[r,t,f,m,y]<>0}: RateOfActivity[r,l,t,m,y]*InputActivityRatio[r,t,f,m,y]  = RateOfUseByTechnologyByMode[r,l,t,m,f,y];
s.t. EBa5_RateOfFuelUse2{r in REGION, l in TIMESLICE, f in FUEL, t in TECHNOLOGY, y in YEAR}: sum{m in MODE_OF_OPERATION: InputActivityRatio[r,t,f,m,y]<>0} RateOfUseByTechnologyByMode[r,l,t,m,f,y] = RateOfUseByTechnology[r,l,t,f,y];
s.t. EBa6_RateOfFuelUse3{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: sum{t in TECHNOLOGY} RateOfUseByTechnology[r,l,t,f,y]  = RateOfUse[r,l,f,y];
s.t. EBa7_EnergyBalanceEachTS1{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: RateOfProduction[r,l,f,y]*YearSplit[l,y] = Production[r,l,f,y];
s.t. EBa8_EnergyBalanceEachTS2{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: RateOfUse[r,l,f,y]*YearSplit[l,y] = Use[r,l,f,y];
s.t. EBa9_EnergyBalanceEachTS3{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: RateOfDemand[r,l,f,y]*YearSplit[l,y] = Demand[r,l,f,y];
s.t. EBa10_EnergyBalanceEachTS4{r in REGION, rr in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: Trade[r,rr,l,f,y] = -Trade[rr,r,l,f,y];
s.t. EBa11_EnergyBalanceEachTS5{r in REGION, l in TIMESLICE, f in FUEL, y in YEAR}: Production[r,l,f,y] >= Demand[r,l,f,y] + Use[r,l,f,y] + sum{rr in REGION} Trade[r,rr,l,f,y]*TradeRoute[r,rr,f,y];
#
#########        	Energy Balance B		 	#############
#
s.t. EBb1_EnergyBalanceEachYear1{r in REGION, f in FUEL, y in YEAR}: sum{l in TIMESLICE} Production[r,l,f,y] = ProductionAnnual[r,f,y];
s.t. EBb2_EnergyBalanceEachYear2{r in REGION, f in FUEL, y in YEAR}: sum{l in TIMESLICE} Use[r,l,f,y] = UseAnnual[r,f,y];
s.t. EBb3_EnergyBalanceEachYear3{r in REGION, rr in REGION, f in FUEL, y in YEAR}: sum{l in TIMESLICE} Trade[r,rr,l,f,y] = TradeAnnual[r,rr,f,y];
s.t. EBb4_EnergyBalanceEachYear4{r in REGION, f in FUEL, y in YEAR}: ProductionAnnual[r,f,y] >= UseAnnual[r,f,y] + sum{rr in REGION} TradeAnnual[r,rr,f,y]*TradeRoute[r,rr,f,y] + AccumulatedAnnualDemand[r,f,y];
#
#########        	Accounting Technology Production/Use	#############
#
s.t. Acc1_FuelProductionByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR}: RateOfProductionByTechnology[r,l,t,f,y] * YearSplit[l,y] = ProductionByTechnology[r,l,t,f,y];
s.t. Acc2_FuelUseByTechnology{r in REGION, l in TIMESLICE, t in TECHNOLOGY, f in FUEL, y in YEAR}: RateOfUseByTechnology[r,l,t,f,y] * YearSplit[l,y] = UseByTechnology[r,l,t,f,y];
s.t. Acc3_AverageAnnualRateOfActivity{r in REGION, t in TECHNOLOGY, m in MODE_OF_OPERATION, y in YEAR}: sum{l in TIMESLICE} RateOfActivity[r,l,t,m,y]*YearSplit[l,y] = TotalAnnualTechnologyActivityByMode[r,t,m,y];
s.t. Acc4_ModelPeriodCostByRegion{r in REGION}:sum{y in YEAR}TotalDiscountedCost[r,y] = ModelPeriodCostByRegion[r];
#
#########        	Storage Equations			#############
#
s.t. S1_RateOfStorageCharge{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: sum{t in TECHNOLOGY, m in MODE_OF_OPERATION, l in TIMESLICE:TechnologyToStorage[r,t,s,m]>0} RateOfActivity[r,l,t,m,y] * TechnologyToStorage[r,t,s,m] * Conversionls[l,ls] * Conversionld[l,ld] * Conversionlh[l,lh] = RateOfStorageCharge[r,s,ls,ld,lh,y];
s.t. S2_RateOfStorageDischarge{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: sum{t in TECHNOLOGY, m in MODE_OF_OPERATION, l in TIMESLICE:TechnologyFromStorage[r,t,s,m]>0} RateOfActivity[r,l,t,m,y] * TechnologyFromStorage[r,t,s,m] * Conversionls[l,ls] * Conversionld[l,ld] * Conversionlh[l,lh] = RateOfStorageDischarge[r,s,ls,ld,lh,y];
s.t. S3_NetChargeWithinYear{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: sum{l in TIMESLICE:Conversionls[l,ls]>0&&Conversionld[l,ld]>0&&Conversionlh[l,lh]>0}  (RateOfStorageCharge[r,s,ls,ld,lh,y] - RateOfStorageDischarge[r,s,ls,ld,lh,y]) * YearSplit[l,y] * Conversionls[l,ls] * Conversionld[l,ld] * Conversionlh[l,lh] = NetChargeWithinYear[r,s,ls,ld,lh,y];
s.t. S4_NetChargeWithinDay{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: (RateOfStorageCharge[r,s,ls,ld,lh,y] - RateOfStorageDischarge[r,s,ls,ld,lh,y]) * DaySplit[lh,y] = NetChargeWithinDay[r,s,ls,ld,lh,y];
s.t. S5_and_S6_StorageLevelYearStart{r in REGION, s in STORAGE, y in YEAR}: if y = min{yy in YEAR} min(yy) then StorageLevelStart[r,s] 
																	else StorageLevelYearStart[r,s,y-1] + sum{ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET} NetChargeWithinYear[r,s,ls,ld,lh,y-1]
																	= StorageLevelYearStart[r,s,y];
s.t. S7_and_S8_StorageLevelYearFinish{r in REGION, s in STORAGE, y in YEAR}: if y < max{yy in YEAR} max(yy) then StorageLevelYearStart[r,s,y+1]
																	else StorageLevelYearStart[r,s,y] + sum{ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET} NetChargeWithinYear[r,s,ls,ld,lh,y] 
																	= StorageLevelYearFinish[r,s,y];	
s.t. S9_and_S10_StorageLevelSeasonStart{r in REGION, s in STORAGE, ls in SEASON, y in YEAR}: if ls = min{lsls in SEASON} min(lsls) then StorageLevelYearStart[r,s,y] 
																	else StorageLevelSeasonStart[r,s,ls-1,y] + sum{ld in DAYTYPE, lh in DAILYTIMEBRACKET} NetChargeWithinYear[r,s,ls-1,ld,lh,y] 
																	= StorageLevelSeasonStart[r,s,ls,y];
s.t. S11_and_S12_StorageLevelDayTypeStart{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, y in YEAR}: if ld = min{ldld in DAYTYPE} min(ldld) then StorageLevelSeasonStart[r,s,ls,y] 
																	else StorageLevelDayTypeStart[r,s,ls,ld-1,y] + sum{lh in DAILYTIMEBRACKET} NetChargeWithinDay[r,s,ls,ld-1,lh,y] * DaysInDayType[ls,ld-1,y]
																	= StorageLevelDayTypeStart[r,s,ls,ld,y];
s.t. S13_and_S14_and_S15_StorageLevelDayTypeFinish{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, y in YEAR}:	if ls = max{lsls in SEASON} max(lsls) && ld = max{ldld in DAYTYPE} max(ldld) then StorageLevelYearFinish[r,s,y] 
																	else if ld = max{ldld in DAYTYPE} max(ldld) then StorageLevelSeasonStart[r,s,ls+1,y]
																	else StorageLevelDayTypeFinish[r,s,ls,ld+1,y] - sum{lh in DAILYTIMEBRACKET} NetChargeWithinDay[r,s,ls,ld+1,lh,y] * DaysInDayType[ls,ld+1,y]
																	= StorageLevelDayTypeFinish[r,s,ls,ld,y];	
#
##########		Storage Constraints				#############
#																	
s.t. SC1_LowerLimit_BeginningOfDailyTimeBracketOfFirstInstanceOfDayTypeInFirstWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: 0 <= (StorageLevelDayTypeStart[r,s,ls,ld,y]+sum{lhlh in DAILYTIMEBRACKET:lh-lhlh>0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageLowerLimit[r,s,y];								
s.t. SC1_UpperLimit_BeginningOfDailyTimeBracketOfFirstInstanceOfDayTypeInFirstWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: (StorageLevelDayTypeStart[r,s,ls,ld,y]+sum{lhlh in DAILYTIMEBRACKET:lh-lhlh>0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageUpperLimit[r,s,y] <= 0;								
s.t. SC2_LowerLimit_EndOfDailyTimeBracketOfLastInstanceOfDayTypeInFirstWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: 0 <= if ld > min{ldld in DAYTYPE} min(ldld) then (StorageLevelDayTypeStart[r,s,ls,ld,y]-sum{lhlh in DAILYTIMEBRACKET:lh-lhlh<0} NetChargeWithinDay[r,s,ls,ld-1,lhlh,y])-StorageLowerLimit[r,s,y];																										
s.t. SC2_UpperLimit_EndOfDailyTimeBracketOfLastInstanceOfDayTypeInFirstWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: if ld > min{ldld in DAYTYPE} min(ldld) then (StorageLevelDayTypeStart[r,s,ls,ld,y]-sum{lhlh in DAILYTIMEBRACKET:lh-lhlh<0} NetChargeWithinDay[r,s,ls,ld-1,lhlh,y])-StorageUpperLimit[r,s,y] <= 0;					
s.t. SC3_LowerLimit_EndOfDailyTimeBracketOfLastInstanceOfDayTypeInLastWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}:  0 <= (StorageLevelDayTypeFinish[r,s,ls,ld,y] - sum{lhlh in DAILYTIMEBRACKET:lh-lhlh<0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageLowerLimit[r,s,y];																										
s.t. SC3_UpperLimit_EndOfDailyTimeBracketOfLastInstanceOfDayTypeInLastWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}:  (StorageLevelDayTypeFinish[r,s,ls,ld,y] - sum{lhlh in DAILYTIMEBRACKET:lh-lhlh<0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageUpperLimit[r,s,y] <= 0;
s.t. SC4_LowerLimit_BeginningOfDailyTimeBracketOfFirstInstanceOfDayTypeInLastWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: 	0 <= if ld > min{ldld in DAYTYPE} min(ldld) then (StorageLevelDayTypeFinish[r,s,ls,ld-1,y]+sum{lhlh in DAILYTIMEBRACKET:lh-lhlh>0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageLowerLimit[r,s,y];
s.t. SC4_UpperLimit_BeginningOfDailyTimeBracketOfFirstInstanceOfDayTypeInLastWeekConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: if ld > min{ldld in DAYTYPE} min(ldld) then (StorageLevelDayTypeFinish[r,s,ls,ld-1,y]+sum{lhlh in DAILYTIMEBRACKET:lh-lhlh>0} NetChargeWithinDay[r,s,ls,ld,lhlh,y])-StorageUpperLimit[r,s,y] <= 0;										
s.t. SC5_MaxChargeConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: RateOfStorageCharge[r,s,ls,ld,lh,y] <= StorageMaxChargeRate[r,s];
s.t. SC6_MaxDischargeConstraint{r in REGION, s in STORAGE, ls in SEASON, ld in DAYTYPE, lh in DAILYTIMEBRACKET, y in YEAR}: RateOfStorageDischarge[r,s,ls,ld,lh,y] <= StorageMaxDischargeRate[r,s];
#
#########		Storage Investments				#############
#
s.t. SI1_StorageUpperLimit{r in REGION, s in STORAGE, y in YEAR}: AccumulatedNewStorageCapacity[r,s,y]+ResidualStorageCapacity[r,s,y] = StorageUpperLimit[r,s,y];
s.t. SI2_StorageLowerLimit{r in REGION, s in STORAGE, y in YEAR}: MinStorageCharge[r,s,y]*StorageUpperLimit[r,s,y] = StorageLowerLimit[r,s,y];
s.t. SI3_TotalNewStorage{r in REGION, s in STORAGE, y in YEAR}: sum{yy in YEAR: y-yy < OperationalLifeStorage[r,s] && y-yy>=0} NewStorageCapacity[r,s,yy]=AccumulatedNewStorageCapacity[r,s,y];
s.t. SI4_UndiscountedCapitalInvestmentStorage{r in REGION, s in STORAGE, y in YEAR}: CapitalCostStorage[r,s,y] * NewStorageCapacity[r,s,y] = CapitalInvestmentStorage[r,s,y];
s.t. SI5_DiscountingCapitalInvestmentStorage{r in REGION, s in STORAGE, y in YEAR}: CapitalInvestmentStorage[r,s,y]/((1+DiscountRateStorage[r,s])^(y-min{yy in YEAR} min(yy))) = DiscountedCapitalInvestmentStorage[r,s,y];
s.t. SI6_SalvageValueStorageAtEndOfPeriod1{r in REGION, s in STORAGE, y in YEAR: (y+OperationalLifeStorage[r,s]-1) <= (max{yy in YEAR} max(yy))}: 0 = SalvageValueStorage[r,s,y];
s.t. SI7_SalvageValueStorageAtEndOfPeriod2{r in REGION, s in STORAGE, y in YEAR: (DepreciationMethod[r]=1 && (y+OperationalLifeStorage[r,s]-1) > (max{yy in YEAR} max(yy)) && DiscountRateStorage[r,s]=0) || (DepreciationMethod[r]=2 && (y+OperationalLifeStorage[r,s]-1) > (max{yy in YEAR} max(yy)))}: CapitalInvestmentStorage[r,s,y]*(1-(max{yy in YEAR} max(yy) - y+1)/OperationalLifeStorage[r,s]) = SalvageValueStorage[r,s,y];
s.t. SI8_SalvageValueStorageAtEndOfPeriod3{r in REGION, s in STORAGE, y in YEAR: DepreciationMethod[r]=1 && (y+OperationalLifeStorage[r,s]-1) > (max{yy in YEAR} max(yy)) && DiscountRateStorage[r,s]>0}: CapitalInvestmentStorage[r,s,y]*(1-(((1+DiscountRateStorage[r,s])^(max{yy in YEAR} max(yy) - y+1)-1)/((1+DiscountRateStorage[r,s])^OperationalLifeStorage[r,s]-1))) = SalvageValueStorage[r,s,y];
s.t. SI9_SalvageValueStorageDiscountedToStartYear{r in REGION, s in STORAGE, y in YEAR}: SalvageValueStorage[r,s,y]/((1+DiscountRateStorage[r,s])^(max{yy in YEAR} max(yy)-min{yy in YEAR} min(yy)+1)) = DiscountedSalvageValueStorage[r,s,y];
s.t. SI10_TotalDiscountedCostByStorage{r in REGION, s in STORAGE, y in YEAR}: DiscountedCapitalInvestmentStorage[r,s,y]-DiscountedSalvageValueStorage[r,s,y] = TotalDiscountedStorageCost[r,s,y];
#
#########       	Capital Costs 		     	#############
#
s.t. CC1_UndiscountedCapitalInvestment{r in REGION, t in TECHNOLOGY, y in YEAR}: CapitalCost[r,t,y] * NewCapacity[r,t,y] = CapitalInvestment[r,t,y];
s.t. CC2_DiscountingCapitalInvestment{r in REGION, t in TECHNOLOGY, y in YEAR}: CapitalInvestment[r,t,y]/((1+DiscountRate[r,t])^(y-min{yy in YEAR} min(yy))) = DiscountedCapitalInvestment[r,t,y];
#
#########           Salvage Value            	#############
#
s.t. SV1_SalvageValueAtEndOfPeriod1{r in REGION, t in TECHNOLOGY, y in YEAR: (y + OperationalLife[r,t]-1) > (max{yy in YEAR} max(yy)) && DiscountRate[r,t]>0}: SalvageValue[r,t,y] = CapitalCost[r,t,y]*NewCapacity[r,t,y]*(1-(((1+DiscountRate[r,t])^(max{yy in YEAR} max(yy) - y+1)-1)/((1+DiscountRate[r,t])^OperationalLife[r,t]-1)));
s.t. SV2_SalvageValueAtEndOfPeriod2{r in REGION, t in TECHNOLOGY, y in YEAR: (y + OperationalLife[r,t]-1) > (max{yy in YEAR} max(yy)) && DiscountRate[r,t]=0}: SalvageValue[r,t,y] = CapitalCost[r,t,y]*NewCapacity[r,t,y]*(1-(max{yy in YEAR} max(yy) - y+1)/OperationalLife[r,t]);
s.t. SV3_SalvageValueAtEndOfPeriod3{r in REGION, t in TECHNOLOGY, y in YEAR: (y + OperationalLife[r,t]-1) <= (max{yy in YEAR} max(yy))}: SalvageValue[r,t,y] = 0;
s.t. SV4_SalvageValueDiscountedToStartYear{r in REGION, t in TECHNOLOGY, y in YEAR}: DiscountedSalvageValue[r,t,y] = SalvageValue[r,t,y]/((1+DiscountRate[r,t])^(1+max{yy in YEAR} max(yy)-min{yy in YEAR} min(yy)));
#
#########        	Operating Costs 		 	#############
#
s.t. OC1_OperatingCostsVariable{r in REGION, t in TECHNOLOGY, l in TIMESLICE, y in YEAR}: sum{m in MODE_OF_OPERATION} TotalAnnualTechnologyActivityByMode[r,t,m,y]*VariableCost[r,t,m,y] = AnnualVariableOperatingCost[r,t,y];
s.t. OC2_OperatingCostsFixedAnnual{r in REGION, t in TECHNOLOGY, y in YEAR}: TotalCapacityAnnual[r,t,y]*FixedCost[r,t,y] = AnnualFixedOperatingCost[r,t,y];
s.t. OC3_OperatingCostsTotalAnnual{r in REGION, t in TECHNOLOGY, y in YEAR}: AnnualFixedOperatingCost[r,t,y]+AnnualVariableOperatingCost[r,t,y] = OperatingCost[r,t,y];
s.t. OC4_DiscountedOperatingCostsTotalAnnual{r in REGION, t in TECHNOLOGY, y in YEAR}: OperatingCost[r,t,y]/((1+DiscountRate[r,t])^(y-min{yy in YEAR} min(yy)+0.5)) = DiscountedOperatingCost[r,t,y];
#
#########       	Total Discounted Costs	 	#############
#
s.t. TDC1_TotalDiscountedCostByTechnology{r in REGION, t in TECHNOLOGY, y in YEAR}: DiscountedOperatingCost[r,t,y]+DiscountedCapitalInvestment[r,t,y]+DiscountedTechnologyEmissionsPenalty[r,t,y]-DiscountedSalvageValue[r,t,y] = TotalDiscountedCostByTechnology[r,t,y];
s.t. TDC2_TotalDiscountedCost{r in REGION, y in YEAR}: sum{t in TECHNOLOGY} TotalDiscountedCostByTechnology[r,t,y]+sum{s in STORAGE} TotalDiscountedStorageCost[r,s,y] = TotalDiscountedCost[r,y];
#
#########      		Total Capacity Constraints 	##############
#
s.t. TCC1_TotalAnnualMaxCapacityConstraint{r in REGION, t in TECHNOLOGY, y in YEAR}: TotalCapacityAnnual[r,t,y] <= TotalAnnualMaxCapacity[r,t,y];
s.t. TCC2_TotalAnnualMinCapacityConstraint{r in REGION, t in TECHNOLOGY, y in YEAR: TotalAnnualMinCapacity[r,t,y]>0}: TotalCapacityAnnual[r,t,y] >= TotalAnnualMinCapacity[r,t,y];
#
#########    		New Capacity Constraints  	##############
#
s.t. NCC1_TotalAnnualMaxNewCapacityConstraint{r in REGION, t in TECHNOLOGY, y in YEAR}: NewCapacity[r,t,y] <= TotalAnnualMaxCapacityInvestment[r,t,y];
s.t. NCC2_TotalAnnualMinNewCapacityConstraint{r in REGION, t in TECHNOLOGY, y in YEAR: TotalAnnualMinCapacityInvestment[r,t,y]>0}: NewCapacity[r,t,y] >= TotalAnnualMinCapacityInvestment[r,t,y];
#
#########   		Annual Activity Constraints	##############
#
s.t. AAC1_TotalAnnualTechnologyActivity{r in REGION, t in TECHNOLOGY, y in YEAR}: sum{l in TIMESLICE} RateOfTotalActivity[r,t,l,y]*YearSplit[l,y] = TotalTechnologyAnnualActivity[r,t,y];
s.t. AAC2_TotalAnnualTechnologyActivityUpperLimit{r in REGION, t in TECHNOLOGY, y in YEAR}: TotalTechnologyAnnualActivity[r,t,y] <= TotalTechnologyAnnualActivityUpperLimit[r,t,y] ;
s.t. AAC3_TotalAnnualTechnologyActivityLowerLimit{r in REGION, t in TECHNOLOGY, y in YEAR: TotalTechnologyAnnualActivityLowerLimit[r,t,y]>0}: TotalTechnologyAnnualActivity[r,t,y] >= TotalTechnologyAnnualActivityLowerLimit[r,t,y] ;
#
#########    		Total Activity Constraints 	##############
#
s.t. TAC1_TotalModelHorizonTechnologyActivity{r in REGION, t in TECHNOLOGY}: sum{y in YEAR} TotalTechnologyAnnualActivity[r,t,y] = TotalTechnologyModelPeriodActivity[r,t];
s.t. TAC2_TotalModelHorizonTechnologyActivityUpperLimit{r in REGION, t in TECHNOLOGY, y in YEAR}: TotalTechnologyModelPeriodActivity[r,t] <= TotalTechnologyModelPeriodActivityUpperLimit[r,t] ;
s.t. TAC3_TotalModelHorizenTechnologyActivityLowerLimit{r in REGION, t in TECHNOLOGY, y in YEAR: TotalTechnologyModelPeriodActivityLowerLimit[r,t]>0}: TotalTechnologyModelPeriodActivity[r,t] >= TotalTechnologyModelPeriodActivityLowerLimit[r,t] ;
#
#########   		Reserve Margin Constraint	############## NTS: Should change demand for production
#
s.t. RM1_ReserveMargin_TechologiesIncluded_In_Activity_Units{r in REGION, l in TIMESLICE, y in YEAR}: sum {t in TECHNOLOGY} TotalCapacityAnnual[r,t,y] * ReserveMarginTagTechnology[r,t,y] * CapacityToActivityUnit[r,t]	 = 	TotalCapacityInReserveMargin[r,y];
s.t. RM2_ReserveMargin_FuelsIncluded{r in REGION, l in TIMESLICE, y in YEAR}: sum {f in FUEL} RateOfProduction[r,l,f,y] * ReserveMarginTagFuel[r,f,y] = DemandNeedingReserveMargin[r,l,y];
s.t. RM3_ReserveMargin_Constraint{r in REGION, l in TIMESLICE, y in YEAR}: DemandNeedingReserveMargin[r,l,y] * ReserveMargin[r,y]<= TotalCapacityInReserveMargin[r,y];
#
#########   		RE Production Target		############## NTS: Should change demand for production
#
s.t. RE1_FuelProductionByTechnologyAnnual{r in REGION, t in TECHNOLOGY, f in FUEL, y in YEAR}: sum{l in TIMESLICE} ProductionByTechnology[r,l,t,f,y] = ProductionByTechnologyAnnual[r,t,f,y];
s.t. RE2_TechIncluded{r in REGION, y in YEAR}: sum{t in TECHNOLOGY, f in FUEL} ProductionByTechnologyAnnual[r,t,f,y]*RETagTechnology[r,t,y] = TotalREProductionAnnual[r,y];
s.t. RE3_FuelIncluded{r in REGION, y in YEAR}: sum{l in TIMESLICE, f in FUEL} RateOfDemand[r,l,f,y]*YearSplit[l,y]*RETagFuel[r,f,y] = RETotalDemandOfTargetFuelAnnual[r,y]; 
s.t. RE4_EnergyConstraint{r in REGION, y in YEAR}:REMinProductionTarget[r,y]*RETotalDemandOfTargetFuelAnnual[r,y] <= TotalREProductionAnnual[r,y];
s.t. RE5_FuelUseByTechnologyAnnual{r in REGION, t in TECHNOLOGY, f in FUEL, y in YEAR}: sum{l in TIMESLICE} RateOfUseByTechnology[r,l,t,f,y]*YearSplit[l,y] = UseByTechnologyAnnual[r,t,f,y];
#
#########   		Emissions Accounting		##############
#
s.t. E1_AnnualEmissionProductionByMode{r in REGION, t in TECHNOLOGY, e in EMISSION, m in MODE_OF_OPERATION, y in YEAR: EmissionActivityRatio[r,t,e,m,y]<>0}: EmissionActivityRatio[r,t,e,m,y]*TotalAnnualTechnologyActivityByMode[r,t,m,y]=AnnualTechnologyEmissionByMode[r,t,e,m,y];
s.t. E2_AnnualEmissionProduction{r in REGION, t in TECHNOLOGY, e in EMISSION, y in YEAR}: sum{m in MODE_OF_OPERATION} AnnualTechnologyEmissionByMode[r,t,e,m,y] = AnnualTechnologyEmission[r,t,e,y];
s.t. E3_EmissionsPenaltyByTechAndEmission{r in REGION, t in TECHNOLOGY, e in EMISSION, y in YEAR}: AnnualTechnologyEmission[r,t,e,y]*EmissionsPenalty[r,e,y] = AnnualTechnologyEmissionPenaltyByEmission[r,t,e,y];
s.t. E4_EmissionsPenaltyByTechnology{r in REGION, t in TECHNOLOGY, y in YEAR}: sum{e in EMISSION} AnnualTechnologyEmissionPenaltyByEmission[r,t,e,y] = AnnualTechnologyEmissionsPenalty[r,t,y];
s.t. E5_DiscountedEmissionsPenaltyByTechnology{r in REGION, t in TECHNOLOGY, y in YEAR}: AnnualTechnologyEmissionsPenalty[r,t,y]/((1+DiscountRate[r,t])^(y-min{yy in YEAR} min(yy)+0.5)) = DiscountedTechnologyEmissionsPenalty[r,t,y];
s.t. E6_EmissionsAccounting1{r in REGION, e in EMISSION, y in YEAR}: sum{t in TECHNOLOGY} AnnualTechnologyEmission[r,t,e,y] = AnnualEmissions[r,e,y];
s.t. E7_EmissionsAccounting2{r in REGION, e in EMISSION}: sum{y in YEAR} AnnualEmissions[r,e,y] = ModelPeriodEmissions[r,e]- ModelPeriodExogenousEmission[r,e];
s.t. E8_AnnualEmissionsLimit{r in REGION, e in EMISSION, y in YEAR}: AnnualEmissions[r,e,y]+AnnualExogenousEmission[r,e,y] <= AnnualEmissionLimit[r,e,y];
s.t. E9_ModelPeriodEmissionsLimit{r in REGION, e in EMISSION}: ModelPeriodEmissions[r,e] <= ModelPeriodEmissionLimit[r,e] ;
#
###########################################################################################
#
solve;
#
#########################################################################################################
#																										#
# 	Summary results tables below are printed to a comma-separated file called "SelectedResults.csv"		#
#	For a full set of results please see "Results.txt"													#
#	If you don't want these printed, please comment-out or delete them.									#
#																										#
#########################################################################################################
#
#	table result{(f,t) in s} OUT "...": f~FROM, t~TO, x[f,t]~FLOW;
#	table result{y in YEAR, r in REGION} OUT "CSV" "Output.csv": y~YEARS, r~REGION, TotalDiscountedCost[y,r];
#

##
##
##		MathProg output script generated by Kristoffer Lorentsens MaPToCSV script - 2014
##		https://github.com/krilor/MaPToCSV
##
##

printf "ID,y,t,l,f,e,m,r,ls,ld,lh,s,value\n" > "SelectedResults.csv";

#
###		YEAR
#

for {y in YEAR } {
	printf "1,%s,,,,,,,,,,,\n", y >> "SelectedResults.csv";
}

#
###		TECHNOLOGY
#

for {t in TECHNOLOGY } {
	printf "2,,%s,,,,,,,,,,\n", t >> "SelectedResults.csv";
}

#
###		TIMESLICE
#

for {l in TIMESLICE } {
	printf "3,,,%s,,,,,,,,,\n", l >> "SelectedResults.csv";
}

#
###		FUEL
#

for {f in FUEL } {
	printf "4,,,,%s,,,,,,,,\n", f >> "SelectedResults.csv";
}

#
###		EMISSION
#

for {e in EMISSION } {
	printf "5,,,,,%s,,,,,,,\n", e >> "SelectedResults.csv";
}

#
###		MODE_OF_OPERATION
#

for {m in MODE_OF_OPERATION } {
	printf "6,,,,,,%s,,,,,,\n", m >> "SelectedResults.csv";
}

#
###		REGION
#

for {r in REGION } {
	printf "7,,,,,,,%s,,,,,\n", r >> "SelectedResults.csv";
}

#
###		SEASON
#

for {ls in SEASON } {
	printf "8,,,,,,,,%s,,,,\n", ls >> "SelectedResults.csv";
}

#
###		DAYTYPE
#

for {ld in DAYTYPE } {
	printf "9,,,,,,,,,%s,,,\n", ld >> "SelectedResults.csv";
}

#
###		DAILYTIMEBRACKET
#

for {lh in DAILYTIMEBRACKET } {
	printf "10,,,,,,,,,,%s,,\n", lh >> "SelectedResults.csv";
}

#
###		STORAGE
#

for {s in STORAGE } {
	printf "11,,,,,,,,,,,%s,\n", s >> "SelectedResults.csv";
}

#
###		YearSplit
#

for {l in TIMESLICE } {
for {y in YEAR } {
	printf "12,%s,,%s,,,,,,,,,%g\n",y,l,YearSplit[l,y] >> "SelectedResults.csv";
}
}

#
###		DiscountRate
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "13,,%s,,,,,%s,,,,,%g\n",t,r,DiscountRate[r,t] >> "SelectedResults.csv";
}
}

#
###		DaySplit
#

for {lh in DAILYTIMEBRACKET } {
for {y in YEAR } {
	printf "14,%s,,,,,,,,,%s,,%g\n",y,lh,DaySplit[lh,y] >> "SelectedResults.csv";
}
}

#
###		Conversionls
#

for {l in TIMESLICE } {
for {ls in SEASON } {
	printf "15,,,%s,,,,,%s,,,,%g\n",l,ls,Conversionls[l,ls] >> "SelectedResults.csv";
}
}

#
###		Conversionld
#

for {l in TIMESLICE } {
for {ld in DAYTYPE } {
	printf "16,,,%s,,,,,,%s,,,%g\n",l,ld,Conversionld[l,ld] >> "SelectedResults.csv";
}
}

#
###		Conversionlh
#

for {l in TIMESLICE } {
for {lh in DAILYTIMEBRACKET } {
	printf "17,,,%s,,,,,,,%s,,%g\n",l,lh,Conversionlh[l,lh] >> "SelectedResults.csv";
}
}

#
###		DaysInDayType
#

for {ls in SEASON } {
for {ld in DAYTYPE } {
for {y in YEAR } {
	printf "18,%s,,,,,,,%s,%s,,,%g\n",y,ls,ld,DaysInDayType[ls,ld,y] >> "SelectedResults.csv";
}
}
}

#
###		TradeRoute
#

for {r in REGION } {
for {rr in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "19,%s,,,%s,,,%s,,,,,%g\n",y,f,r,TradeRoute[r,rr,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		DepreciationMethod
#

for {r in REGION } {
	printf "20,,,,,,,%s,,,,,%g\n",r,DepreciationMethod[r] >> "SelectedResults.csv";
}

#
###		SpecifiedAnnualDemand
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "21,%s,,,%s,,,%s,,,,,%g\n",y,f,r,SpecifiedAnnualDemand[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		SpecifiedDemandProfile
#

for {r in REGION } {
for {f in FUEL } {
for {l in TIMESLICE } {
for {y in YEAR } {
	printf "22,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,SpecifiedDemandProfile[r,f,l,y] >> "SelectedResults.csv";
}
}
}
}

#
###		AccumulatedAnnualDemand
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "23,%s,,,%s,,,%s,,,,,%g\n",y,f,r,AccumulatedAnnualDemand[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		CapacityToActivityUnit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "24,,%s,,,,,%s,,,,,%g\n",t,r,CapacityToActivityUnit[r,t] >> "SelectedResults.csv";
}
}

#
###		TechWithCapacityNeededToMeetPeakTS
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "25,,%s,,,,,%s,,,,,%g\n",t,r,TechWithCapacityNeededToMeetPeakTS[r,t] >> "SelectedResults.csv";
}
}

#
###		CapacityFactor
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {l in TIMESLICE } {
for {y in YEAR } {
	printf "26,%s,%s,%s,,,,%s,,,,,%g\n",y,t,l,r,CapacityFactor[r,t,l,y] >> "SelectedResults.csv";
}
}
}
}

#
###		AvailabilityFactor
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "27,%s,%s,,,,,%s,,,,,%g\n",y,t,r,AvailabilityFactor[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		OperationalLife
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "28,,%s,,,,,%s,,,,,%g\n",t,r,OperationalLife[r,t] >> "SelectedResults.csv";
}
}

#
###		ResidualCapacity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "29,%s,%s,,,,,%s,,,,,%g\n",y,t,r,ResidualCapacity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		InputActivityRatio
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "30,%s,%s,,%s,,%s,%s,,,,,%g\n",y,t,f,m,r,InputActivityRatio[r,t,f,m,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		OutputActivityRatio
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "31,%s,%s,,%s,,%s,%s,,,,,%g\n",y,t,f,m,r,OutputActivityRatio[r,t,f,m,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		CapitalCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "32,%s,%s,,,,,%s,,,,,%g\n",y,t,r,CapitalCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		VariableCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "33,%s,%s,,,,%s,%s,,,,,%g\n",y,t,m,r,VariableCost[r,t,m,y] >> "SelectedResults.csv";
}
}
}
}

#
###		FixedCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "34,%s,%s,,,,,%s,,,,,%g\n",y,t,r,FixedCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TechnologyToStorage
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {s in STORAGE } {
for {m in MODE_OF_OPERATION } {
	printf "35,,%s,,,,%s,%s,,,,%s,%g\n",t,m,r,s,TechnologyToStorage[r,t,s,m] >> "SelectedResults.csv";
}
}
}
}

#
###		TechnologyFromStorage
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {s in STORAGE } {
for {m in MODE_OF_OPERATION } {
	printf "36,,%s,,,,%s,%s,,,,%s,%g\n",t,m,r,s,TechnologyFromStorage[r,t,s,m] >> "SelectedResults.csv";
}
}
}
}

#
###		StorageLevelStart
#

for {r in REGION } {
for {s in STORAGE } {
	printf "37,,,,,,,%s,,,,%s,%g\n",r,s,StorageLevelStart[r,s] >> "SelectedResults.csv";
}
}

#
###		StorageMaxChargeRate
#

for {r in REGION } {
for {s in STORAGE } {
	printf "38,,,,,,,%s,,,,%s,%g\n",r,s,StorageMaxChargeRate[r,s] >> "SelectedResults.csv";
}
}

#
###		StorageMaxDischargeRate
#

for {r in REGION } {
for {s in STORAGE } {
	printf "39,,,,,,,%s,,,,%s,%g\n",r,s,StorageMaxDischargeRate[r,s] >> "SelectedResults.csv";
}
}

#
###		MinStorageCharge
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "40,%s,,,,,,%s,,,,%s,%g\n",y,r,s,MinStorageCharge[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		OperationalLifeStorage
#

for {r in REGION } {
for {s in STORAGE } {
	printf "41,,,,,,,%s,,,,%s,%g\n",r,s,OperationalLifeStorage[r,s] >> "SelectedResults.csv";
}
}

#
###		CapitalCostStorage
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "42,%s,,,,,,%s,,,,%s,%g\n",y,r,s,CapitalCostStorage[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountRateStorage
#

for {r in REGION } {
for {s in STORAGE } {
	printf "43,,,,,,,%s,,,,%s,%g\n",r,s,DiscountRateStorage[r,s] >> "SelectedResults.csv";
}
}

#
###		ResidualStorageCapacity
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "44,%s,,,,,,%s,,,,%s,%g\n",y,r,s,ResidualStorageCapacity[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		CapacityOfOneTechnologyUnit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "45,%s,%s,,,,,%s,,,,,%g\n",y,t,r,CapacityOfOneTechnologyUnit[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalAnnualMaxCapacity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "46,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalAnnualMaxCapacity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalAnnualMinCapacity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "47,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalAnnualMinCapacity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalAnnualMaxCapacityInvestment
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "48,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalAnnualMaxCapacityInvestment[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalAnnualMinCapacityInvestment
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "49,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalAnnualMinCapacityInvestment[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalTechnologyAnnualActivityUpperLimit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "50,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalTechnologyAnnualActivityUpperLimit[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalTechnologyAnnualActivityLowerLimit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "51,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalTechnologyAnnualActivityLowerLimit[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalTechnologyModelPeriodActivityUpperLimit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "52,,%s,,,,,%s,,,,,%g\n",t,r,TotalTechnologyModelPeriodActivityUpperLimit[r,t] >> "SelectedResults.csv";
}
}

#
###		TotalTechnologyModelPeriodActivityLowerLimit
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "53,,%s,,,,,%s,,,,,%g\n",t,r,TotalTechnologyModelPeriodActivityLowerLimit[r,t] >> "SelectedResults.csv";
}
}

#
###		ReserveMarginTagTechnology
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "54,%s,%s,,,,,%s,,,,,%g\n",y,t,r,ReserveMarginTagTechnology[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		ReserveMarginTagFuel
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "55,%s,,,%s,,,%s,,,,,%g\n",y,f,r,ReserveMarginTagFuel[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		ReserveMargin
#

for {r in REGION } {
for {y in YEAR } {
	printf "56,%s,,,,,,%s,,,,,%g\n",y,r,ReserveMargin[r,y] >> "SelectedResults.csv";
}
}

#
###		RETagTechnology
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "57,%s,%s,,,,,%s,,,,,%g\n",y,t,r,RETagTechnology[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		RETagFuel
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "58,%s,,,%s,,,%s,,,,,%g\n",y,f,r,RETagFuel[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		REMinProductionTarget
#

for {r in REGION } {
for {y in YEAR } {
	printf "59,%s,,,,,,%s,,,,,%g\n",y,r,REMinProductionTarget[r,y] >> "SelectedResults.csv";
}
}

#
###		EmissionActivityRatio
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {e in EMISSION } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "60,%s,%s,,,%s,%s,%s,,,,,%g\n",y,t,e,m,r,EmissionActivityRatio[r,t,e,m,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		EmissionsPenalty
#

for {r in REGION } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "61,%s,,,,%s,,%s,,,,,%g\n",y,e,r,EmissionsPenalty[r,e,y] >> "SelectedResults.csv";
}
}
}

#
###		AnnualExogenousEmission
#

for {r in REGION } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "62,%s,,,,%s,,%s,,,,,%g\n",y,e,r,AnnualExogenousEmission[r,e,y] >> "SelectedResults.csv";
}
}
}

#
###		AnnualEmissionLimit
#

for {r in REGION } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "63,%s,,,,%s,,%s,,,,,%g\n",y,e,r,AnnualEmissionLimit[r,e,y] >> "SelectedResults.csv";
}
}
}

#
###		ModelPeriodExogenousEmission
#

for {r in REGION } {
for {e in EMISSION } {
	printf "64,,,,,%s,,%s,,,,,%g\n",e,r,ModelPeriodExogenousEmission[r,e] >> "SelectedResults.csv";
}
}

#
###		ModelPeriodEmissionLimit
#

for {r in REGION } {
for {e in EMISSION } {
	printf "65,,,,,%s,,%s,,,,,%g\n",e,r,ModelPeriodEmissionLimit[r,e] >> "SelectedResults.csv";
}
}

#
###		RateOfDemand
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "66,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,RateOfDemand[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		Demand
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "67,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,Demand[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		RateOfStorageCharge
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {lh in DAILYTIMEBRACKET } {
for {y in YEAR } {
	printf "68,%s,,,,,,%s,%s,%s,%s,%s,%g\n",y,r,ls,ld,lh,s,RateOfStorageCharge[r,s,ls,ld,lh,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		RateOfStorageDischarge
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {lh in DAILYTIMEBRACKET } {
for {y in YEAR } {
	printf "69,%s,,,,,,%s,%s,%s,%s,%s,%g\n",y,r,ls,ld,lh,s,RateOfStorageDischarge[r,s,ls,ld,lh,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		NetChargeWithinYear
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {lh in DAILYTIMEBRACKET } {
for {y in YEAR } {
	printf "70,%s,,,,,,%s,%s,%s,%s,%s,%g\n",y,r,ls,ld,lh,s,NetChargeWithinYear[r,s,ls,ld,lh,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		NetChargeWithinDay
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {lh in DAILYTIMEBRACKET } {
for {y in YEAR } {
	printf "71,%s,,,,,,%s,%s,%s,%s,%s,%g\n",y,r,ls,ld,lh,s,NetChargeWithinDay[r,s,ls,ld,lh,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		StorageLevelYearStart
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "72,%s,,,,,,%s,,,,%s,%g\n",y,r,s,StorageLevelYearStart[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		StorageLevelYearFinish
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "73,%s,,,,,,%s,,,,%s,%g\n",y,r,s,StorageLevelYearFinish[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		StorageLevelSeasonStart
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {y in YEAR } {
	printf "74,%s,,,,,,%s,%s,,,%s,%g\n",y,r,ls,s,StorageLevelSeasonStart[r,s,ls,y] >> "SelectedResults.csv";
}
}
}
}

#
###		StorageLevelDayTypeStart
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {y in YEAR } {
	printf "75,%s,,,,,,%s,%s,%s,,%s,%g\n",y,r,ls,ld,s,StorageLevelDayTypeStart[r,s,ls,ld,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		StorageLevelDayTypeFinish
#

for {r in REGION } {
for {s in STORAGE } {
for {ls in SEASON } {
for {ld in DAYTYPE } {
for {y in YEAR } {
	printf "76,%s,,,,,,%s,%s,%s,,%s,%g\n",y,r,ls,ld,s,StorageLevelDayTypeFinish[r,s,ls,ld,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		StorageLowerLimit
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "77,%s,,,,,,%s,,,,%s,%g\n",y,r,s,StorageLowerLimit[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		StorageUpperLimit
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "78,%s,,,,,,%s,,,,%s,%g\n",y,r,s,StorageUpperLimit[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		AccumulatedNewStorageCapacity
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "79,%s,,,,,,%s,,,,%s,%g\n",y,r,s,AccumulatedNewStorageCapacity[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		NewStorageCapacity
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "80,%s,,,,,,%s,,,,%s,%g\n",y,r,s,NewStorageCapacity[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		CapitalInvestmentStorage
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "81,%s,,,,,,%s,,,,%s,%g\n",y,r,s,CapitalInvestmentStorage[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedCapitalInvestmentStorage
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "82,%s,,,,,,%s,,,,%s,%g\n",y,r,s,DiscountedCapitalInvestmentStorage[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		SalvageValueStorage
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "83,%s,,,,,,%s,,,,%s,%g\n",y,r,s,SalvageValueStorage[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedSalvageValueStorage
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "84,%s,,,,,,%s,,,,%s,%g\n",y,r,s,DiscountedSalvageValueStorage[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalDiscountedStorageCost
#

for {r in REGION } {
for {s in STORAGE } {
for {y in YEAR } {
	printf "85,%s,,,,,,%s,,,,%s,%g\n",y,r,s,TotalDiscountedStorageCost[r,s,y] >> "SelectedResults.csv";
}
}
}

#
###		NumberOfNewTechnologyUnits
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "86,%s,%s,,,,,%s,,,,,%g\n",y,t,r,NumberOfNewTechnologyUnits[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		NewCapacity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "87,%s,%s,,,,,%s,,,,,%g\n",y,t,r,NewCapacity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		AccumulatedNewCapacity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "88,%s,%s,,,,,%s,,,,,%g\n",y,t,r,AccumulatedNewCapacity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalCapacityAnnual
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "89,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalCapacityAnnual[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		RateOfActivity
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "90,%s,%s,%s,,,%s,%s,,,,,%g\n",y,t,l,m,r,RateOfActivity[r,l,t,m,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		RateOfTotalActivity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {l in TIMESLICE } {
for {y in YEAR } {
	printf "91,%s,%s,%s,,,,%s,,,,,%g\n",y,t,l,r,RateOfTotalActivity[r,t,l,y] >> "SelectedResults.csv";
}
}
}
}

#
###		TotalTechnologyAnnualActivity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "92,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalTechnologyAnnualActivity[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalAnnualTechnologyActivityByMode
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "93,%s,%s,,,,%s,%s,,,,,%g\n",y,t,m,r,TotalAnnualTechnologyActivityByMode[r,t,m,y] >> "SelectedResults.csv";
}
}
}
}

#
###		RateOfProductionByTechnologyByMode
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {m in MODE_OF_OPERATION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "94,%s,%s,%s,%s,,%s,%s,,,,,%g\n",y,t,l,f,m,r,RateOfProductionByTechnologyByMode[r,l,t,m,f,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		RateOfProductionByTechnology
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "95,%s,%s,%s,%s,,,%s,,,,,%g\n",y,t,l,f,r,RateOfProductionByTechnology[r,l,t,f,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		ProductionByTechnology
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "96,%s,%s,%s,%s,,,%s,,,,,%g\n",y,t,l,f,r,ProductionByTechnology[r,l,t,f,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		ProductionByTechnologyAnnual
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "97,%s,%s,,%s,,,%s,,,,,%g\n",y,t,f,r,ProductionByTechnologyAnnual[r,t,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		RateOfProduction
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "98,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,RateOfProduction[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		Production
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "99,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,Production[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		RateOfUseByTechnologyByMode
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {m in MODE_OF_OPERATION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "100,%s,%s,%s,%s,,%s,%s,,,,,%g\n",y,t,l,f,m,r,RateOfUseByTechnologyByMode[r,l,t,m,f,y] >> "SelectedResults.csv";
}
}
}
}
}
}

#
###		RateOfUseByTechnology
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "101,%s,%s,%s,%s,,,%s,,,,,%g\n",y,t,l,f,r,RateOfUseByTechnology[r,l,t,f,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		UseByTechnologyAnnual
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "102,%s,%s,,%s,,,%s,,,,,%g\n",y,t,f,r,UseByTechnologyAnnual[r,t,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		RateOfUse
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "103,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,RateOfUse[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		UseByTechnology
#

for {r in REGION } {
for {l in TIMESLICE } {
for {t in TECHNOLOGY } {
for {f in FUEL } {
for {y in YEAR } {
	printf "104,%s,%s,%s,%s,,,%s,,,,,%g\n",y,t,l,f,r,UseByTechnology[r,l,t,f,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		Use
#

for {r in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "105,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,Use[r,l,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		Trade
#

for {r in REGION } {
for {rr in REGION } {
for {l in TIMESLICE } {
for {f in FUEL } {
for {y in YEAR } {
	printf "106,%s,,%s,%s,,,%s,,,,,%g\n",y,l,f,r,Trade[r,rr,l,f,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		TradeAnnual
#

for {r in REGION } {
for {rr in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "107,%s,,,%s,,,%s,,,,,%g\n",y,f,r,TradeAnnual[r,rr,f,y] >> "SelectedResults.csv";
}
}
}
}

#
###		ProductionAnnual
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "108,%s,,,%s,,,%s,,,,,%g\n",y,f,r,ProductionAnnual[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		UseAnnual
#

for {r in REGION } {
for {f in FUEL } {
for {y in YEAR } {
	printf "109,%s,,,%s,,,%s,,,,,%g\n",y,f,r,UseAnnual[r,f,y] >> "SelectedResults.csv";
}
}
}

#
###		CapitalInvestment
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "110,%s,%s,,,,,%s,,,,,%g\n",y,t,r,CapitalInvestment[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedCapitalInvestment
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "111,%s,%s,,,,,%s,,,,,%g\n",y,t,r,DiscountedCapitalInvestment[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		SalvageValue
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "112,%s,%s,,,,,%s,,,,,%g\n",y,t,r,SalvageValue[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedSalvageValue
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "113,%s,%s,,,,,%s,,,,,%g\n",y,t,r,DiscountedSalvageValue[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		OperatingCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "114,%s,%s,,,,,%s,,,,,%g\n",y,t,r,OperatingCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedOperatingCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "115,%s,%s,,,,,%s,,,,,%g\n",y,t,r,DiscountedOperatingCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		AnnualVariableOperatingCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "116,%s,%s,,,,,%s,,,,,%g\n",y,t,r,AnnualVariableOperatingCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		AnnualFixedOperatingCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "117,%s,%s,,,,,%s,,,,,%g\n",y,t,r,AnnualFixedOperatingCost[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		VariableOperatingCost
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {l in TIMESLICE } {
for {y in YEAR } {
	printf "118,%s,%s,%s,,,,%s,,,,,%g\n",y,t,l,r,VariableOperatingCost[r,t,l,y] >> "SelectedResults.csv";
}
}
}
}

#
###		TotalDiscountedCostByTechnology
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "119,%s,%s,,,,,%s,,,,,%g\n",y,t,r,TotalDiscountedCostByTechnology[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalDiscountedCost
#

for {r in REGION } {
for {y in YEAR } {
	printf "120,%s,,,,,,%s,,,,,%g\n",y,r,TotalDiscountedCost[r,y] >> "SelectedResults.csv";
}
}

#
###		ModelPeriodCostByRegion
#

for {r in REGION } {
	printf "121,,,,,,,%s,,,,,%g\n",r,ModelPeriodCostByRegion[r] >> "SelectedResults.csv";
}

#
###		TotalCapacityInReserveMargin
#

for {r in REGION } {
for {y in YEAR } {
	printf "122,%s,,,,,,%s,,,,,%g\n",y,r,TotalCapacityInReserveMargin[r,y] >> "SelectedResults.csv";
}
}

#
###		DemandNeedingReserveMargin
#

for {r in REGION } {
for {l in TIMESLICE } {
for {y in YEAR } {
	printf "123,%s,,%s,,,,%s,,,,,%g\n",y,l,r,DemandNeedingReserveMargin[r,l,y] >> "SelectedResults.csv";
}
}
}

#
###		TotalREProductionAnnual
#

for {r in REGION } {
for {y in YEAR } {
	printf "124,%s,,,,,,%s,,,,,%g\n",y,r,TotalREProductionAnnual[r,y] >> "SelectedResults.csv";
}
}

#
###		RETotalDemandOfTargetFuelAnnual
#

for {r in REGION } {
for {y in YEAR } {
	printf "125,%s,,,,,,%s,,,,,%g\n",y,r,RETotalDemandOfTargetFuelAnnual[r,y] >> "SelectedResults.csv";
}
}

#
###		TotalTechnologyModelPeriodActivity
#

for {r in REGION } {
for {t in TECHNOLOGY } {
	printf "126,,%s,,,,,%s,,,,,%g\n",t,r,TotalTechnologyModelPeriodActivity[r,t] >> "SelectedResults.csv";
}
}

#
###		AnnualTechnologyEmissionByMode
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {e in EMISSION } {
for {m in MODE_OF_OPERATION } {
for {y in YEAR } {
	printf "127,%s,%s,,,%s,%s,%s,,,,,%g\n",y,t,e,m,r,AnnualTechnologyEmissionByMode[r,t,e,m,y] >> "SelectedResults.csv";
}
}
}
}
}

#
###		AnnualTechnologyEmission
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "128,%s,%s,,,%s,,%s,,,,,%g\n",y,t,e,r,AnnualTechnologyEmission[r,t,e,y] >> "SelectedResults.csv";
}
}
}
}

#
###		AnnualTechnologyEmissionPenaltyByEmission
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "129,%s,%s,,,%s,,%s,,,,,%g\n",y,t,e,r,AnnualTechnologyEmissionPenaltyByEmission[r,t,e,y] >> "SelectedResults.csv";
}
}
}
}

#
###		AnnualTechnologyEmissionsPenalty
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "130,%s,%s,,,,,%s,,,,,%g\n",y,t,r,AnnualTechnologyEmissionsPenalty[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		DiscountedTechnologyEmissionsPenalty
#

for {r in REGION } {
for {t in TECHNOLOGY } {
for {y in YEAR } {
	printf "131,%s,%s,,,,,%s,,,,,%g\n",y,t,r,DiscountedTechnologyEmissionsPenalty[r,t,y] >> "SelectedResults.csv";
}
}
}

#
###		AnnualEmissions
#

for {r in REGION } {
for {e in EMISSION } {
for {y in YEAR } {
	printf "132,%s,,,,%s,,%s,,,,,%g\n",y,e,r,AnnualEmissions[r,e,y] >> "SelectedResults.csv";
}
}
}

#
###		ModelPeriodEmissions
#

for {r in REGION } {
for {e in EMISSION } {
	printf "133,,,,,%s,,%s,,,,,%g\n",e,r,ModelPeriodEmissions[r,e] >> "SelectedResults.csv";
}
}



end;